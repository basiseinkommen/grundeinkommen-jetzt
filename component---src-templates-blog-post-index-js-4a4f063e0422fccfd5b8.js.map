{"version":3,"sources":["webpack:///./src/components/utils/FormatHtml/index.js","webpack:///./src/templates/BlogPost/styles.js","webpack:///./src/templates/BlogPost/index.js","webpack:///./src/components/ui/TitleSection/styles.js","webpack:///./src/components/ui/TitleSection/index.js"],"names":["FormatHtml","content","className","dangerouslySetInnerHTML","__html","Links","styled","h3","figure","div","query","BlogPost","data","pageContext","post","markdownRemark","previous","next","Layout","Seo","title","frontmatter","Container","section","TitleSection","date","subtitle","html","to","fields","slug","rel","Title","h2","center","SubTitle","h4","Separator"],"mappings":"4FAAA,yBAgBeA,IAbI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,0BACEC,UAAU,cACVC,wBAAyB,CACvBC,OAAQH,O,uMCIDI,GARQC,IAAOC,GAAV,oEAAGD,CAAH,SACZ,wCAGeA,IAAOE,OAAV,oEAAGF,CAAH,SACZ,+FAGeA,IAAOG,IAAV,oEAAGH,CAAH,SACZ,kFCoCOI,GAFEC,UAlCE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAClBC,EAAOF,EAAKG,eACVC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KAElB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAON,EAAKO,YAAYD,QAC7B,kBAACE,EAAA,EAAD,CAAWC,SAAO,GAChB,kBAACC,EAAA,EAAD,CACEJ,MAAON,EAAKO,YAAYI,KACxBC,SAAUZ,EAAKO,YAAYD,QAE7B,kBAACpB,EAAA,EAAD,CAAYC,QAASa,EAAKa,OAC1B,kBAAC,EAAD,KACE,8BACGX,GACC,kBAAC,IAAD,CAAMY,GAAIZ,EAASa,OAAOC,KAAMC,IAAI,YAApC,KACKf,EAASK,YAAYD,QAI9B,8BACGH,GACC,kBAAC,IAAD,CAAMW,GAAIX,EAAKY,OAAOC,KAAMC,IAAI,QAC7Bd,EAAKI,YAAYD,MADpB,WAaI,e,uEC7CLI,EAAelB,IAAOG,IAAV,0EAAGH,CAAH,SACnB,sDAGO0B,EAAQ1B,IAAO2B,GAAV,mEAAG3B,CAAH,aACZ,oHACF,qBAAG4B,QAAyB,wBAGnBC,EAAW7B,IAAO8B,GAAV,sEAAG9B,CAAH,aACf,oEACF,qBAAG4B,QAAyB,wBAGnBG,EAAY/B,IAAO2B,GAAV,uEAAG3B,CAAH,8DAChB,8FACF,qBAAG4B,QAAyB,yCAIxB,mFAKA,kGCTOV,IAdM,SAAC,GAAD,IAAGU,EAAH,EAAGA,OAAQd,EAAX,EAAWA,MAAOM,EAAlB,EAAkBA,SAAlB,OACnB,kBAAC,EAAD,KACGA,GAAY,kBAAC,EAAD,CAAiBQ,OAAQA,GAASd,GAC/C,kBAAC,EAAD,CAAcc,OAAQA,GAASR,GAC/B,kBAAC,EAAD,CAAkBQ,OAAQA","file":"component---src-templates-blog-post-index-js-4a4f063e0422fccfd5b8.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormatHtml = ({ content }) => (\n  <span\n    className=\"format-html\"\n    dangerouslySetInnerHTML={{\n      __html: content\n    }}\n  />\n)\n\nFormatHtml.propTypes = {\n  content: PropTypes.any.isRequired\n}\n\nexport default FormatHtml\n","import styled from 'styled-components'\nimport tw from 'tailwind.macro'\n\nexport const Title = styled.h3`\n  ${tw`font-semibold mb-4`};\n`\n\nexport const Image = styled.figure`\n  ${tw`w-full rounded-lg overflow-hidden mt-4 mb-10`};\n`\n\nexport const Links = styled.div`\n  ${tw`w-full flex justify-between mt-10`};\n`\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\n\nimport Layout from 'components/Layout'\nimport Seo from 'components/Seo'\nimport Container from 'components/ui/Container'\nimport TitleSection from 'components/ui/TitleSection'\nimport FormatHtml from 'components/utils/FormatHtml'\n\nimport * as Styled from './styles'\n\nconst BlogPost = ({ data, pageContext }) => {\n  const post = data.markdownRemark\n  const { previous, next } = pageContext\n\n  return (\n    <Layout>\n      <Seo title={post.frontmatter.title} />\n      <Container section>\n        <TitleSection\n          title={post.frontmatter.date}\n          subtitle={post.frontmatter.title}\n        />\n        <FormatHtml content={post.html} />\n        <Styled.Links>\n          <span>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"previous\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </span>\n          <span>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </span>\n        </Styled.Links>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","import styled from 'styled-components'\nimport tw from 'tailwind.macro'\n\nexport const TitleSection = styled.div`\n  ${tw`flex flex-col w-full`};\n`\n\nexport const Title = styled.h2`\n  ${tw`uppercase mb-4 text-lg font-bold w-full text-left`};\n  ${({ center }) => center && tw`text-center`};\n`\n\nexport const SubTitle = styled.h4`\n  ${tw`text-xs text-pink-500 w-full text-left`};\n  ${({ center }) => center && tw`text-center`};\n`\n\nexport const Separator = styled.h2`\n  ${tw`relative w-2 h-8 mb-6 -mt-2`};\n  ${({ center }) => center && tw`mx-auto`};\n\n  &:before {\n    content: '';\n    ${tw`bg-indigo-900 h-full w-px absolute left-0`};\n  }\n\n  &:after {\n    content: '';\n    ${tw`bg-pink-500 h-6 w-px absolute ml-1`};\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as Styled from './styles'\n\nconst TitleSection = ({ center, title, subtitle }) => (\n  <Styled.TitleSection>\n    {subtitle && <Styled.SubTitle center={center}>{title}</Styled.SubTitle>}\n    <Styled.Title center={center}>{subtitle}</Styled.Title>\n    <Styled.Separator center={center} />\n  </Styled.TitleSection>\n)\n\nTitleSection.propTypes = {\n  center: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string\n}\n\nexport default TitleSection\n"],"sourceRoot":""}